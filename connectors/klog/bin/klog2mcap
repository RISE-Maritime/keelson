#!/usr/bin/env python3

import json
import logging
import pathlib
import argparse
from io import BufferedReader
from typing import Dict, Tuple
from contextlib import contextmanager

from mcap.writer import Writer
from mcap.well_known import SchemaEncoding, MessageEncoding
from google.protobuf.message import DecodeError

import keelson
from keelson.Envelope_pb2 import KeyEnvelopePair

logger = logging.getLogger("klog2mcap")


@contextmanager
def ignore(*exceptions):
    try:
        yield
    except exceptions:
        logger.exception("Something went wrong in the listener!")


@contextmanager
def mcap_writer(file_handle):
    try:
        writer = Writer(file_handle)
        writer.start()
        logger.info("MCAP writer initilized")
        yield writer
    finally:
        writer.finish()
        logger.info("MCAP writer finished")


def mcap_write_message(
    writer: Writer, channel_id: int, log_time: int, publish_time: int, data: bytes
):
    logger.debug(
        "Writing to file: channel_id=%s, log_time=%s, publish_time=%s",
        channel_id,
        log_time,
        publish_time,
    )
    writer.add_message(
        channel_id=channel_id,
        log_time=log_time,
        publish_time=publish_time,
        data=data,
    )


def klog_read_message(reader: BufferedReader):
    while True:
        serialized_length = reader.read(4)

        # EOF
        if len(serialized_length) == 0:
            return

        length = int.from_bytes(serialized_length, "big", signed=False)
        serialized_data = reader.read(length)

        # EOF
        if len(serialized_data) < length:
            return

        data = KeyEnvelopePair.FromString(serialized_data)

        yield data.timestamp.ToNanoseconds(), data.key, data.envelope


def run(args: argparse.Namespace):
    with args.input.open("rb") as fhi, args.output.open("wb") as fho, mcap_writer(
        fho
    ) as writer:
        schemas: Dict[str, int] = {}
        channels: Dict[str, int] = {}

        for received_at, key, envelope in klog_read_message(fhi):
            with ignore(Exception):
                logger.debug("Received sample on key: %s", key)

                # Uncover from keelson envelope
                try:
                    _, enclosed_at, payload = keelson.uncover(envelope)
                except DecodeError:
                    logger.exception(
                        "Topic %s did not contain a valid keelson.Envelope: %s",
                        key,
                        envelope,
                    )
                    continue

                # If this key is known, write message to file
                if key in channels:
                    logger.debug("Key %s is already known!", key)
                    mcap_write_message(
                        writer, channels[key], received_at, enclosed_at, payload
                    )
                    continue

                # Else, lets start finding out about schemas etc
                try:
                    subject = keelson.get_subject_from_pub_sub_key(key)
                except ValueError:
                    logger.exception(
                        "Received key did not match the expected format: %s", key
                    )
                    continue

                logger.info("Unseen key %s, adding to file", key)

                # IF we havent already got a schema for this schema
                if not subject in schemas:
                    logger.info("Subject %s not seen before", subject)

                    if keelson.is_subject_well_known(subject):
                        logger.info("Subject %s is well-known!", subject)
                        # Get info about the well-known subject
                        keelson_schema = keelson.get_subject_schema(subject)

                        file_descriptor_set = (
                            keelson.get_protobuf_file_descriptor_set_from_type_name(
                                keelson_schema
                            )
                        )
                        schemas[subject] = writer.register_schema(
                            name=keelson_schema,
                            encoding=SchemaEncoding.Protobuf,
                            data=file_descriptor_set.SerializeToString(),
                        )

                    else:
                        logger.info(
                            "Unknown subject, storing without schema...")
                        schemas[subject] = writer.register_schema(
                            name=subject,
                            encoding=SchemaEncoding.SelfDescribing,
                            data=b"",
                        )

                # Now we have a schema_id, moving on to registering a channel
                schema_id = schemas[subject]

                logger.debug(
                    "Registering a channel (%s) with schema_id=%s",
                    key,
                    schema_id,
                )

                channels[key] = writer.register_channel(
                    topic=key,
                    message_encoding=MessageEncoding.Protobuf,
                    schema_id=schema_id,
                )

                # Finally, put the sample on the queue
                logger.debug("...and writing the actual message to file!")
                mcap_write_message(
                    writer, channels[key], received_at, enclosed_at, payload
                )


def main():
    parser = argparse.ArgumentParser(
        prog="klog2mcap",
        description="Converts from klog to mcap format.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("--log-level", type=int, default=logging.INFO)

    parser.add_argument(
        "-i",
        "--input",
        type=pathlib.Path,
        required=True,
        help="File path to read klog file from",
    )

    parser.add_argument(
        "-o",
        "--output",
        type=pathlib.Path,
        required=True,
        help="File path to write mcap file to",
    )

    # Parse arguments and start doing our thing
    args = parser.parse_args()

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)

    run(args)


if __name__ == "__main__":
    main()
