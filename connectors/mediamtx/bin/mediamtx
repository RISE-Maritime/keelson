#!/usr/bin/env python3

"""
Command line utility tool for acting as a whep bridge across a zenoh network
"""

# pylint: disable=duplicate-code
# pylint: disable=invalid-name

import sys
import json
import logging
import argparse
import warnings
from contextlib import contextmanager

import zenoh
import requests
import keelson
from google.protobuf.message import DecodeError
from keelson.interfaces.ErrorResponse_pb2 import ErrorResponse
from keelson.interfaces.WHEPProxy_pb2 import WHEPRequest, WHEPResponse


@contextmanager
def ignore(*exceptions):
    try:
        yield
    except exceptions:
        logging.exception("Something went wrong in the callback!")


def whep(session: zenoh.Session, args: argparse.Namespace):
    """
    See here for details: https://github.com/bluenviron/mediamtx?tab=readme-ov-file#webrtc
    """

    key = keelson.construct_rpc_key(
        realm=args.realm,
        entity_id=args.entity_id,
        procedure="whep",
        responder_id=args.responder_id,
    )

    logging.info("Declaring queryable on key: %s", key)
    queryable = session.declare_queryable(key, complete=True)

    while True:
        query: zenoh.Query
        with ignore(Exception), queryable.recv() as query:

            if query.payload is None:
                message = "Missing a payload in the query. It should be of type WHEPRequest"
                logging.error(message)
                query.reply_err(ErrorResponse(message).SerializeToString())
                return

            try:
                body = WHEPRequest.FromString(query.payload.to_bytes())
            except DecodeError as exc:
                message = f"Failed to parse the body as a WHEPRequest: {exc}"
                logging.exception(message)
                query.reply_err(ErrorResponse(message).SerializeToString())
                return

            # Build full http url for the resource
            url = f"{args.whep_host}/{body.path}/whep"
            logging.debug("Full http url: %s", url)

            try:
                res = requests.post(
                    url,
                    headers={"Content-Type": "application/sdp"},
                    data=body.sdp,
                    timeout=args.timeout,
                )
                res.raise_for_status()
            except Exception as exc:  # pylint: disable=broad-exception-caught
                message = f"WHEP request failed with reason: {exc}"
                logging.exception(message)
                query.reply_err(ErrorResponse(message).SerializeToString())
                return

            # Success, return response sdp
            logging.debug(
                "Successful WHEP request, returning response SDP: %s", res.text
            )
            query.reply(query.key_expr, WHEPResponse(
                res.text).SerializeToString())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="mediamtx",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument("--log-level", type=int, default=logging.WARNING)
    parser.add_argument(
        "--connect",
        action="append",
        type=str,
        help="Endpoints to connect to.",
    )

    parser.add_argument("-r", "--realm", type=str, required=True)
    parser.add_argument("-e", "--entity-id", type=str, required=True)

    # Subcommands
    subparsers = parser.add_subparsers(required=True)

    # whep subcommand
    whep_parser = subparsers.add_parser("whep")
    whep_parser.set_defaults(func=whep)
    whep_parser.add_argument("-m", "--whep-host", type=str, required=True)
    whep_parser.add_argument("-i", "--responder-id", type=str, required=True)
    whep_parser.add_argument(
        "-t", "--timeout", type=int, default=5, required=False)

    # Parse arguments and start doing our thing
    args = parser.parse_args()

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)
    warnings.filterwarnings("once")

    # Construct session
    logging.info("Opening Zenoh session...")
    conf = zenoh.Config()

    if args.connect is not None:
        conf.insert_json5(zenoh.config.CONNECT_KEY, json.dumps(args.connect))

    with zenoh.open(conf) as session:
        # Dispatch to correct function
        try:
            args.func(session, args)
        except KeyboardInterrupt:
            logging.info("Closing down on user request!")
            sys.exit(0)
