// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.0
// source: NetworkPingPong.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "";

export interface NetworkPing {
  sentAt: Date | undefined;
  payload: Uint8Array;
}

export interface NetworkPong {
  sentAt: Date | undefined;
  ping: NetworkPing | undefined;
  pingReceivedAt: Date | undefined;
}

function createBaseNetworkPing(): NetworkPing {
  return { sentAt: undefined, payload: new Uint8Array(0) };
}

export const NetworkPing: MessageFns<NetworkPing> = {
  encode(message: NetworkPing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentAt !== undefined) {
      Timestamp.encode(toTimestamp(message.sentAt), writer.uint32(10).fork()).join();
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkPing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkPing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sentAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkPing {
    return {
      sentAt: isSet(object.sentAt) ? fromJsonTimestamp(object.sentAt) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: NetworkPing): unknown {
    const obj: any = {};
    if (message.sentAt !== undefined) {
      obj.sentAt = message.sentAt.toISOString();
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkPing>, I>>(base?: I): NetworkPing {
    return NetworkPing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NetworkPing>, I>>(object: I): NetworkPing {
    const message = createBaseNetworkPing();
    message.sentAt = object.sentAt ?? undefined;
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseNetworkPong(): NetworkPong {
  return { sentAt: undefined, ping: undefined, pingReceivedAt: undefined };
}

export const NetworkPong: MessageFns<NetworkPong> = {
  encode(message: NetworkPong, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentAt !== undefined) {
      Timestamp.encode(toTimestamp(message.sentAt), writer.uint32(10).fork()).join();
    }
    if (message.ping !== undefined) {
      NetworkPing.encode(message.ping, writer.uint32(18).fork()).join();
    }
    if (message.pingReceivedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.pingReceivedAt), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NetworkPong {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetworkPong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sentAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ping = NetworkPing.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pingReceivedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NetworkPong {
    return {
      sentAt: isSet(object.sentAt) ? fromJsonTimestamp(object.sentAt) : undefined,
      ping: isSet(object.ping) ? NetworkPing.fromJSON(object.ping) : undefined,
      pingReceivedAt: isSet(object.pingReceivedAt) ? fromJsonTimestamp(object.pingReceivedAt) : undefined,
    };
  },

  toJSON(message: NetworkPong): unknown {
    const obj: any = {};
    if (message.sentAt !== undefined) {
      obj.sentAt = message.sentAt.toISOString();
    }
    if (message.ping !== undefined) {
      obj.ping = NetworkPing.toJSON(message.ping);
    }
    if (message.pingReceivedAt !== undefined) {
      obj.pingReceivedAt = message.pingReceivedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NetworkPong>, I>>(base?: I): NetworkPong {
    return NetworkPong.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NetworkPong>, I>>(object: I): NetworkPong {
    const message = createBaseNetworkPong();
    message.sentAt = object.sentAt ?? undefined;
    message.ping = (object.ping !== undefined && object.ping !== null)
      ? NetworkPing.fromPartial(object.ping)
      : undefined;
    message.pingReceivedAt = object.pingReceivedAt ?? undefined;
    return message;
  },
};

export interface NetworkPingPong {
  ping_network(request: NetworkPing): Promise<NetworkPong>;
}

export const NetworkPingPongServiceName = "NetworkPingPong";
export class NetworkPingPongClientImpl implements NetworkPingPong {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || NetworkPingPongServiceName;
    this.rpc = rpc;
    this.ping_network = this.ping_network.bind(this);
  }
  ping_network(request: NetworkPing): Promise<NetworkPong> {
    const data = NetworkPing.encode(request).finish();
    const promise = this.rpc.request(this.service, "ping_network", data);
    return promise.then((data) => NetworkPong.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
