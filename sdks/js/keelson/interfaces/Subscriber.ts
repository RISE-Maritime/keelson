// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.0
// source: Subscriber.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SuccessResponse } from "./Response";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "";

export interface Subscriptions {
  /** subject -> topic mapping */
  subscriptions: { [key: string]: string };
}

export interface Subscriptions_SubscriptionsEntry {
  key: string;
  value: string;
}

function createBaseSubscriptions(): Subscriptions {
  return { subscriptions: {} };
}

export const Subscriptions: MessageFns<Subscriptions> = {
  encode(message: Subscriptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.subscriptions).forEach(([key, value]) => {
      Subscriptions_SubscriptionsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subscriptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Subscriptions_SubscriptionsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.subscriptions[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subscriptions {
    return {
      subscriptions: isObject(object.subscriptions)
        ? Object.entries(object.subscriptions).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Subscriptions): unknown {
    const obj: any = {};
    if (message.subscriptions) {
      const entries = Object.entries(message.subscriptions);
      if (entries.length > 0) {
        obj.subscriptions = {};
        entries.forEach(([k, v]) => {
          obj.subscriptions[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Subscriptions>, I>>(base?: I): Subscriptions {
    return Subscriptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Subscriptions>, I>>(object: I): Subscriptions {
    const message = createBaseSubscriptions();
    message.subscriptions = Object.entries(object.subscriptions ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseSubscriptions_SubscriptionsEntry(): Subscriptions_SubscriptionsEntry {
  return { key: "", value: "" };
}

export const Subscriptions_SubscriptionsEntry: MessageFns<Subscriptions_SubscriptionsEntry> = {
  encode(message: Subscriptions_SubscriptionsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subscriptions_SubscriptionsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscriptions_SubscriptionsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Subscriptions_SubscriptionsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Subscriptions_SubscriptionsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Subscriptions_SubscriptionsEntry>, I>>(
    base?: I,
  ): Subscriptions_SubscriptionsEntry {
    return Subscriptions_SubscriptionsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Subscriptions_SubscriptionsEntry>, I>>(
    object: I,
  ): Subscriptions_SubscriptionsEntry {
    const message = createBaseSubscriptions_SubscriptionsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

export interface Subscriber {
  get_subscriptions(request: Empty): Promise<Subscriptions>;
  set_subscriptions(request: Subscriptions): Promise<SuccessResponse>;
}

export const SubscriberServiceName = "Subscriber";
export class SubscriberClientImpl implements Subscriber {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SubscriberServiceName;
    this.rpc = rpc;
    this.get_subscriptions = this.get_subscriptions.bind(this);
    this.set_subscriptions = this.set_subscriptions.bind(this);
  }
  get_subscriptions(request: Empty): Promise<Subscriptions> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "get_subscriptions", data);
    return promise.then((data) => Subscriptions.decode(new BinaryReader(data)));
  }

  set_subscriptions(request: Subscriptions): Promise<SuccessResponse> {
    const data = Subscriptions.encode(request).finish();
    const promise = this.rpc.request(this.service, "set_subscriptions", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
