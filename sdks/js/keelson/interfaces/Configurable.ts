// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.0
// source: Configurable.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { SuccessResponse } from "./Response";
import { Empty } from "./google/protobuf/empty";
import { Struct } from "./google/protobuf/struct";

export const protobufPackage = "";

export interface Configurable {
  get_config(request: Empty): Promise<Struct>;
  set_config(request: Struct): Promise<SuccessResponse>;
}

export const ConfigurableServiceName = "Configurable";
export class ConfigurableClientImpl implements Configurable {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ConfigurableServiceName;
    this.rpc = rpc;
    this.get_config = this.get_config.bind(this);
    this.set_config = this.set_config.bind(this);
  }
  get_config(request: Empty): Promise<Struct> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "get_config", data);
    return promise.then((data) => Struct.decode(new BinaryReader(data)));
  }

  set_config(request: Struct): Promise<SuccessResponse> {
    const data = Struct.encode(request).finish();
    const promise = this.rpc.request(this.service, "set_config", data);
    return promise.then((data) => SuccessResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
