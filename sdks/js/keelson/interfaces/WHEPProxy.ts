// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.0
// source: WHEPProxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface WHEPRequest {
  path: string;
  sdp: string;
}

export interface WHEPResponse {
  sdp: string;
}

function createBaseWHEPRequest(): WHEPRequest {
  return { path: "", sdp: "" };
}

export const WHEPRequest: MessageFns<WHEPRequest> = {
  encode(message: WHEPRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.sdp !== "") {
      writer.uint32(18).string(message.sdp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WHEPRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWHEPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sdp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WHEPRequest {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
    };
  },

  toJSON(message: WHEPRequest): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WHEPRequest>, I>>(base?: I): WHEPRequest {
    return WHEPRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WHEPRequest>, I>>(object: I): WHEPRequest {
    const message = createBaseWHEPRequest();
    message.path = object.path ?? "";
    message.sdp = object.sdp ?? "";
    return message;
  },
};

function createBaseWHEPResponse(): WHEPResponse {
  return { sdp: "" };
}

export const WHEPResponse: MessageFns<WHEPResponse> = {
  encode(message: WHEPResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WHEPResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWHEPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WHEPResponse {
    return { sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "" };
  },

  toJSON(message: WHEPResponse): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WHEPResponse>, I>>(base?: I): WHEPResponse {
    return WHEPResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WHEPResponse>, I>>(object: I): WHEPResponse {
    const message = createBaseWHEPResponse();
    message.sdp = object.sdp ?? "";
    return message;
  },
};

export interface WHEPProxy {
  whep_signal(request: WHEPRequest): Promise<WHEPResponse>;
}

export const WHEPProxyServiceName = "WHEPProxy";
export class WHEPProxyClientImpl implements WHEPProxy {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WHEPProxyServiceName;
    this.rpc = rpc;
    this.whep_signal = this.whep_signal.bind(this);
  }
  whep_signal(request: WHEPRequest): Promise<WHEPResponse> {
    const data = WHEPRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "whep_signal", data);
    return promise.then((data) => WHEPResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
