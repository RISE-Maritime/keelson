syntax = "proto3";

import "google/protobuf/timestamp.proto";

package keelson.vessel;

message VesselInfo {
    // The source timestamp of the vessel state
    google.protobuf.Timestamp timestamp = 1;
    // The unique identifier of the vessel
    string id = 2;
    // The name of the vessel
    string name = 3;
    // The type of the vessel
    string type = 4;
    // IMO number of the vessel
    int32 imo = 5;
    // MMSI number of the vessel
    int32 mmsi = 6;
}


message CommonReferencePoint {
    float distance_to_bow_meters = 1;
    float distance_to_stern_meters = 2;
    float distance_to_port_meters = 3;
    float distance_to_starboard_meters = 4;
  }

message VesselType {
    // The source timestamp of the vessel type information
    google.protobuf.Timestamp timestamp = 1;
    
  // Type of target according to AIS standard + some additional types identifeid by id number over 100  
  enum VesselTypes {  
    UNKNOWN = 0;
    WIG = 20;
    FISHING = 30;
    TOWING = 31;
    TOWING_LONG = 32; // Towing longer than 200m or wider than 25m
    DREDGING = 33;
    DIVING = 34;
    MILITARY = 35;
    SAILING = 36;
    PLEASURE = 37;
    HSC = 40; // High speed craft
    PILOT = 50;
    SAR = 51; // Search and rescue
    TUG = 52;
    PORT = 53;
    ANTI_POLLUTION = 54; // Anti-pollution equipment
    LAW_ENFORCEMENT = 55;
    MEDICAL = 58;
    PASSENGER = 60; // Passenger, all ships of this type
    CARGO = 70; // Cargo, all ships of this type
    TANKER = 80; // Tanker, all ships of this type
    OTHER = 90; // Other, all ships of this type
  }

  VesselTypes type = 9;
    
}



// The vessel statics message on fixed properties of the vessel
message VesselStatics {
    enum PropulsionTypes {
      UNSPECIFIED = 0;
      SINGLE = 1;
      DUAL = 2;
      DIESEL = 3;
      ELECTRIC = 4;
      HYBRID = 5;
    }
  
    string model = 1;  // # Where we should point towards a model file description, could make a public DB with simplified model descriptor?
    int32 rudder_count = 2; // # 0 = no rudder, 1 = single rudder, 2 = dual rudder
    bool rudder_single_mode = 3;  // # combind is more commeon therm if singel input command for dual rudder is used
    int32 propulsion_count = 4; // # 0 = no propulsion, 1 = single propulsion, 2 = dual propulsion
    PropulsionTypes propulsion_type = 5;
    int32 bow_thruster_count = 6; // # 0 = no bow thruster, 1 = single bow thruster, 2 = dual bow thruster ...
    int32 stern_thruster_count = 7; // # 0 = no stern thruster, 1 = single stern thruster, 2 = dual stern thruster ...
    int32 gps_count = 8;
    int32 gyrocompass_count = 9;
    int32 magnetic_compass_count = 10;
  
    // # Vessel cordinate/frame of reference should also be defined for each unit if data exisists 
    // # challange is to alos define origin and orientation of the frame we trying to use the Pose.proto for this 
  }