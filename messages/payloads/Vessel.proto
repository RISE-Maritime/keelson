syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "LocationFix.proto";
import "VoyagePlan.proto";
import "Navigation.proto";

package keelson.vessel;


// Vessel message is combination of sub messages that describe the target

message Vessels {
  google.protobuf.Timestamp timestamp = 2;
  repeated Vessel vessels = 1;
}


// Compound message for vessel information
message Vessel {
  // Timestamp closest to when data was produced
  google.protobuf.Timestamp timestamp = 1;

  VesselInformation information = 2;

  // Vessel position/location fix
  foxglove.PositionFix position = 3; 

  keelson.navigation.SpeedThroughWater speed_through_water = 5;
  
  keelson.navigation.TrajectoryOverGround trajectory_over_ground = 6;
  
  keelson.navigation.RateOfTurn rate_of_turn = 7;
  
  keelson.navigation.Heading heading = 8;
  
  keelson.navigation.NavigationStatus navigation_status = 9;

  keelson.navigation.CommonReferencePoint common_reference_point = 10;

  repeated VesselDataSource data_source = 11;

  VesselVoyage voyage = 12;

  VesselStatics statics = 13;

}



// VesselDescription is static information about the vessel
message VesselInformation {
  google.protobuf.Timestamp timestamp = 1;

  int32 mmsi = 2;
  int32 imo = 3;
  string name = 4;
  string call_sign = 5;
  
  float length_over_all_meters = 6;
  float width_over_all_meters = 7;
  float draft_meters = 8;

  // Type of target according to AIS standard + some additional types identifeid by id number over 100  
  enum VesselType {  
    UNKNOWN = 0;
    WIG = 20;
    FISHING = 30;
    TOWING = 31;
    TOWING_LONG = 32; // Towing longer than 200m or wider than 25m
    DREDGING = 33;
    DIVING = 34;
    MILITARY = 35;
    SAILING = 36;
    PLEASURE = 37;
    HSC = 40; // High speed craft
    PILOT = 50;
    SAR = 51; // Search and rescue
    TUG = 52;
    PORT = 53;
    ANTI_POLLUTION = 54; // Anti-pollution equipment
    LAW_ENFORCEMENT = 55;
    MEDICAL = 58;
    PASSENGER = 60; // Passenger, all ships of this type
    CARGO = 70; // Cargo, all ships of this type
    TANKER = 80; // Tanker, all ships of this type
    OTHER = 90; // Other, all ships of this type
  }

  VesselType type = 9;

  string json_str = 99;
}


message VesselVoyage {
  google.protobuf.Timestamp timestamp = 1;

  string departed_country_name = 2; 
  string departed_country_code = 3; 
  string departure_port_name = 4;
  string departure_port_code = 5;

  string destination_country_name = 6;
  string destination_country_code = 7;
  string destination_port_name = 8;
  string destination_port_code = 9; 

  int32 time_to_go_seconds = 10;

  keelson.voyage.TimeOfDepartureArrival time_of_departure_arrival = 11;
  
  keelson.voyage.VoyagePlan voyage_plan = 12;

  string json_str = 99;
}


message VesselDataSource {
  // Source where the data was generated [AIS, Radar, etc.]
  enum Source {
    AIS_RADIO_RECEIVER = 0;
    AIS_PROVIDER = 1;
    RADAR = 3;
    LIDAR = 4;
    CAMERA = 5;
    SIMULATION = 6;
    PLATFORM = 7;
  }
  // If sensor fusion is used, multiple data sources can be used
  Source source = 1;
  string description = 2;
  string name = 3;
  string json_str = 99;
}


// The vessel statics message on fixed properties of the vessel
message VesselStatics {
  enum PropulsionType {
    UNSPECIFIED = 0;
    SINGLE = 1;
    DUAL = 2;
    DIESEL = 3;
    ELECTRIC = 4;
    HYBRID = 5;
  }
  
  string model = 1;  // # Where we should point towards a model file description, could make a public DB with simplified model descriptor?
  int32 rudder_count = 2; // # 0 = no rudder, 1 = single rudder, 2 = dual rudder
  bool rudder_single_mode = 3;  // # combind is more commeon therm if singel input command for dual rudder is used
  int32 propulsion_count = 4; // # 0 = no propulsion, 1 = single propulsion, 2 = dual propulsion
  PropulsionType propulsion_type = 5; // # enum? --> Changed to enum
  int32 bow_thruster_count = 6; // # 0 = no bow thruster, 1 = single bow thruster, 2 = dual bow thruster ...
  int32 stern_thruster_count = 7; // # 0 = no stern thruster, 1 = single stern thruster, 2 = dual stern thruster ...
  int32 gps_count = 8;
  int32 gyrocompass_count = 9;
  int32 magnetic_compass_count = 10;

  // # Vessel cordinate/frame of reference should also be defined for each unit if data exisists 
  // # challange is to alos define origin and orientation of the frame we trying to use the Pose.proto for this 
}


// Autopilot settings message for vessel control
// # Good!!! Should we name all Seettings or Configurations?
// # shoud we use naming sheama of settings_<name> or configuration_<name>?
message Autopilot {
  bool autopilot_on = 1; // # is it in command of the vessel or just have power?
  string control_mode = 2;
  float course = 3;
  float radius = 4;
  float rot = 5;
  float rudder_limit = 6;
  string rudder_performance = 7;
  string rudder_timing = 8;
  string steering_mode = 9;
}


// Orientation message defining the orientation of a device
message Orientation {
  double roll = 1; // Roll angle in degrees
  double pitch = 2; // Pitch angle in degrees
  double yaw = 3; // Yaw angle in degrees
  string reference_frame = 4; // Reference frame for the orientation
}


// Device configuration message
message Device {
  string id = 1; // Unique identifier for the device
  string name = 2; // Device name
  string type = 3; // Device type, e.g., "GPS", "IMU", "LIDAR", "Camera"
  Location location = 4; // Location of the device
  Orientation orientation = 5; // Orientation of the device
  string description = 6; // Brief description of the device
}

// Location message defining the position of a device
message Location {
  double x = 1; // X-coordinate of the device location
  double y = 2; // Y-coordinate of the device location
  double z = 3; // Z-coordinate of the device location
  string reference_frame = 4; // Reference frame, e.g., "vehicle_center"
}


message LimitMinMax {
  double min_value = 1;
  double max_value = 2;
  double min_safety_value = 3;
  double max_safety_value = 4;
}



